import React, { useState } from 'react'
import Navigation from './Navigation'

const Dashboard = () => {
  const [isOffline, setIsOffline] = useState(false)
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [isListening, setIsListening] = useState(false)

  // Placeholder data for crop calendar
  const cropCalendar = [
    { crop: 'ржзрж╛ржи', action: 'рж░рзЛржкржг', date: 'рззрзл ржорж╛рж░рзНржЪ', status: 'upcoming', icon: 'ЁЯМ╛' },
    { crop: 'ржЧржо', action: 'рж╕ржВржЧрзНрж░рж╣', date: 'рзирзж ржорж╛рж░рзНржЪ', status: 'urgent', icon: 'ЁЯМ┐' },
    { crop: 'ржнрзБржЯрзНржЯрж╛', action: 'рж░рзЛржкржг', date: 'рзирзл ржорж╛рж░рзНржЪ', status: 'upcoming', icon: 'ЁЯМ╜' },
    { crop: 'рж╕ржмржЬрж┐', action: 'рж╕рзЗржЪ', date: 'ржЖржЬ', status: 'today', icon: 'ЁЯеж' },
  ]

  // Placeholder data for smart suggestions
  const smartSuggestions = [
    'ЁЯМзя╕П ржЖржЧрж╛ржорзА рзй ржжрж┐ржирзЗ ржнрж╛рж░рзА ржмрзГрж╖рзНржЯрж┐ рж╣ржмрзЗ - ржзрж╛ржи рж░рзЛржкржгрзЗрж░ ржЬржирзНржп ржЙржкржпрзБржХрзНржд рж╕ржоржпрж╝',
    'ЁЯМбя╕П рждрж╛ржкржорж╛рждрзНрж░рж╛ рзйрзл┬░C ржПрж░ ржЙржкрж░рзЗ - рж╕ржХрж╛рж▓рзЗ ржмрж╛ рж╕ржирзНржзрзНржпрж╛ржпрж╝ рж╕рзЗржЪ ржжрж┐ржи',
    'ЁЯМ▒ ржорж╛ржЯрж┐рж░ ржЖрж░рзНржжрзНрж░рждрж╛ ржХржо - ржЬрзИржм рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи',
    'тШАя╕П рж░рзЛржжрзЗрж░ рждрзАржмрзНрж░рждрж╛ ржмрзЗрж╢рж┐ - ржЫрж╛ржпрж╝рж╛ ржжрзЗржУржпрж╝рж╛ ржЧрж╛ржЫржкрж╛рж▓рж╛ рж░ржХрзНрж╖рж╛ ржХрж░рзБржи',
  ]

  // Placeholder data for weather forecast
  const weatherForecast = [
    { day: 'ржЖржЬ', temp: 'рзйрзи┬░C', condition: 'тШАя╕П', rain: 'рзж%' },
    { day: 'ржХрж╛рж▓', temp: 'рзйрзж┬░C', condition: 'тЫЕ', rain: 'рззрзж%' },
    { day: 'ржкрж░рж╢рзБ', temp: 'рзирзо┬░C', condition: 'ЁЯМзя╕П', rain: 'рзорзж%' },
    { day: 'ржоржЩрзНржЧрж▓', temp: 'рзирзп┬░C', condition: 'ЁЯМзя╕П', rain: 'рзнрзж%' },
    { day: 'ржмрзБржз', temp: 'рзйрзз┬░C', condition: 'тЫЕ', rain: 'рзирзж%' },
    { day: 'ржмрзГрж╣рж╕рзНржкрждрж┐', temp: 'рзйрзй┬░C', condition: 'тШАя╕П', rain: 'рзж%' },
    { day: 'рж╢рзБржХрзНрж░', temp: 'рзйрзи┬░C', condition: 'тШАя╕П', rain: 'рзл%' },
  ]

  // Placeholder data for alerts
  const alerts = [
    {
      type: 'danger',
      icon: 'тШФ',
      title: 'ржнрж╛рж░рзА ржмрзГрж╖рзНржЯрж┐ рж╕рждрж░рзНржХрждрж╛',
      message: 'ржнрж╛рж░рзА ржмрзГрж╖рзНржЯрж┐ рж╣ржмрзЗ рзй ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ - ржлрж╕рж▓ рж░ржХрзНрж╖рж╛рж░ ржмрзНржпржмрж╕рзНржерж╛ ржирж┐ржи',
    },
    {
      type: 'success',
      icon: 'ЁЯМ╛',
      title: 'ржзрж╛ржи рж░рзЛржкржгрзЗрж░ рж╕ржоржпрж╝',
      message: 'ржПржЗ рж╕ржкрзНрждрж╛рж╣рзЗ ржзрж╛ржи рж░рзЛржкржгрзЗрж░ ржЙржкржпрзБржХрзНржд рж╕ржоржпрж╝ - ржорж╛ржЯрж┐ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рзБржи',
    },
    {
      type: 'info',
      icon: 'ЁЯМбя╕П',
      title: 'рждрж╛ржкржорж╛рждрзНрж░рж╛ ржмрзГржжрзНржзрж┐',
      message: 'рждрж╛ржкржорж╛рждрзНрж░рж╛ ржмрзГржжрзНржзрж┐ ржкрж╛ржЪрзНржЫрзЗ - рж╕рзЗржЪрзЗрж░ рж╕ржоржпрж╝ ржмрж╛ржбрж╝рж╛ржи',
    },
    {
      type: 'warning',
      icon: 'ЁЯРЫ',
      title: 'ржХрзАржЯржкрждржЩрзНржЧ рж╕рждрж░рзНржХрждрж╛',
      message: 'ржзрж╛ржи ржХрзНрж╖рзЗрждрзЗ ржХрзАржЯржкрждржЩрзНржЧрзЗрж░ ржЖржХрзНрж░ржоржг ржжрзЗржЦрж╛ ржпрж╛ржЪрзНржЫрзЗ - ржмрзНржпржмрж╕рзНржерж╛ ржирж┐ржи',
    },
  ]

  // Weather map data for Bangladesh
  const weatherMap = [
    { region: 'рж░рж╛ржЬрж╢рж╛рж╣рзА', condition: 'тШАя╕П', temp: 'рзйрзи┬░C' },
    { region: 'ржврж╛ржХрж╛', condition: 'тЫЕ', temp: 'рзйрзж┬░C' },
    { region: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо', condition: 'ЁЯМзя╕П', temp: 'рзирзо┬░C' },
    { region: 'рж╕рж┐рж▓рзЗржЯ', condition: 'ЁЯМзя╕П', temp: 'рзирзн┬░C' },
    { region: 'ржЦрзБрж▓ржирж╛', condition: 'тШАя╕П', temp: 'рзйрзз┬░C' },
    { region: 'ржмрж░рж┐рж╢рж╛рж▓', condition: 'тЫЕ', temp: 'рзирзп┬░C' },
  ]

  const getStatusColor = (status) => {
    switch (status) {
      case 'urgent': return 'text-red-600 bg-red-50 border-red-200'
      case 'today': return 'text-green-600 bg-green-50 border-green-200'
      case 'upcoming': return 'text-blue-600 bg-blue-50 border-blue-200'
      default: return 'text-gray-600 bg-gray-50 border-gray-200'
    }
  }

  const getAlertType = (type) => {
    switch (type) {
      case 'danger': return 'alert-danger'
      case 'success': return 'alert-success'
      case 'warning': return 'alert-warning'
      case 'info': return 'alert-info'
      default: return 'alert-info'
    }
  }

  // Voice assistance function
  const speakText = (text) => {
    if ('speechSynthesis' in window) {
      setIsListening(true)
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = 'bn-IN'
      utterance.onend = () => setIsListening(false)
      speechSynthesis.speak(utterance)
    } else {
      alert('ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржнржпрж╝рзЗрж╕ рж╕рж╛ржкрзЛрж░рзНржЯ ржирзЗржЗ')
    }
  }

  // Emergency help function
  const handleEmergencyHelp = () => {
    alert('ЁЯЪи ржЬрж░рзБрж░рж┐ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржХрзГрж╖рж┐ ржЕржлрж┐рж╕рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: рззрзмрззрзирзй')
  }

  // Toggle dark mode
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
    document.documentElement.classList.toggle('dark')
  }

  return (
    <div className={`min-h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-50'}`}>
      <Navigation />
      
      {/* Offline Mode Indicator */}
      {isOffline && (
        <div className="bg-yellow-500 text-white text-center py-2 px-4">
          ЁЯУ┤ ржЗржирзНржЯрж╛рж░ржирзЗржЯ ржирзЗржЗ тАУ рж╕рж░рзНржмрж╢рзЗрж╖ рждржерзНржп ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        </div>
      )}

      {/* Emergency SOS Button */}
      <div className="fixed top-20 right-4 z-50">
        <button
          onClick={handleEmergencyHelp}
          className="bg-red-600 hover:bg-red-700 text-white p-4 rounded-full shadow-lg animate-pulse"
          title="ржЬрж░рзБрж░рж┐ рж╕рж╛рж╣рж╛ржпрзНржп"
        >
          ЁЯЪи
        </button>
      </div>

      {/* Dark Mode Toggle */}
      <div className="fixed top-20 left-4 z-50">
        <button
          onClick={toggleDarkMode}
          className={`p-3 rounded-full shadow-lg ${
            isDarkMode ? 'bg-yellow-500 text-gray-900' : 'bg-gray-800 text-white'
          }`}
          title={isDarkMode ? 'ржЖрж▓рзЛ ржорзЛржб' : 'ржЕржирзНржзржХрж╛рж░ ржорзЛржб'}
        >
          {isDarkMode ? 'тШАя╕П' : 'ЁЯМЩ'}
        </button>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            рж╕рзНржмрж╛ржЧрждржо, ржХрзГрж╖ржХ ржнрж╛ржЗ! ЁЯСитАНЁЯМ╛
          </h1>
          <p className="text-gray-600">
            ржЖржЬ {new Date().toLocaleDateString('bn-BD')} - ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржжрзЗржЦрзБржи
          </p>
        </div>

        {/* Main Dashboard Grid */}
        <div className="grid lg:grid-cols-2 gap-8">
          {/* Left Side - Crop Calendar & Smart Suggestions */}
          <div className="space-y-6">
            {/* Interactive Crop Calendar */}
            <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                ЁЯУЕ ржлрж╕рж▓ ржХрзНржпрж╛рж▓рзЗржирзНржбрж╛рж░
              </h2>
              <div className="space-y-3">
                {cropCalendar.map((item, index) => (
                  <div
                    key={index}
                    className={`p-4 rounded-lg border-2 ${getStatusColor(item.status)}`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{item.icon}</span>
                        <div>
                          <p className="font-semibold">{item.crop}</p>
                          <p className="text-sm opacity-80">{item.action}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold">{item.date}</p>
                        <p className="text-xs opacity-70">
                          {item.status === 'urgent' && 'ржЬрж░рзБрж░рж┐'}
                          {item.status === 'today' && 'ржЖржЬ'}
                          {item.status === 'upcoming' && 'ржЖрж╕ржЫрзЗ'}
                        </p>
                      </div>
                    </div>
                    {/* Voice button for each calendar item */}
                    <button
                      onClick={() => speakText(`${item.crop} ${item.action} ${item.date}`)}
                      className="mt-2 text-blue-600 hover:text-blue-800 text-sm flex items-center space-x-1"
                      disabled={isListening}
                    >
                      <span>ЁЯФК</span>
                      <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'рж╢рзБржирзБржи'}</span>
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Smart Suggestions */}
            <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                ЁЯТб рж╕рзНржорж╛рж░рзНржЯ ржкрж░рж╛ржорж░рзНрж╢
              </h2>
              <div className="space-y-3">
                {smartSuggestions.map((suggestion, index) => (
                  <div key={index} className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400">
                    <p className="text-blue-800">{suggestion}</p>
                    <button
                      onClick={() => speakText(suggestion)}
                      className="mt-2 text-blue-600 hover:text-blue-800 text-sm flex items-center space-x-1"
                      disabled={isListening}
                    >
                      <span>ЁЯФК</span>
                      <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'рж╢рзБржирзБржи'}</span>
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Right Side - Weather & Alerts */}
          <div className="space-y-6">
            {/* Weather Forecast */}
            <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                тШФ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕
              </h2>
              <div className="grid grid-cols-7 gap-2">
                {weatherForecast.map((day, index) => (
                  <div key={index} className="text-center p-3 bg-gray-50 rounded-lg">
                    <p className="text-sm font-medium text-gray-600">{day.day}</p>
                    <p className="text-2xl mb-1">{day.condition}</p>
                    <p className="text-sm font-semibold text-gray-800">{day.temp}</p>
                    <p className="text-xs text-gray-500">{day.rain}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Weather Map Visualization */}
            <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                ЁЯЧ║я╕П ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржорж╛ржиржЪрж┐рждрзНрж░
              </h2>
              <div className="grid grid-cols-3 gap-2">
                {weatherMap.map((region, index) => (
                  <div key={index} className="text-center p-2 bg-gray-50 rounded-lg">
                    <p className="text-xs font-medium text-gray-600">{region.region}</p>
                    <p className="text-lg">{region.condition}</p>
                    <p className="text-xs text-gray-800">{region.temp}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Smart Alerts */}
            <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                ЁЯЪи рж╕рзНржорж╛рж░рзНржЯ рж╕рждрж░рзНржХрждрж╛
              </h2>
              <div className="space-y-3">
                {alerts.map((alert, index) => (
                  <div key={index} className={`alert-card ${getAlertType(alert.type)}`}>
                    <div className="flex items-start space-x-3">
                      <span className="text-2xl">{alert.icon}</span>
                      <div className="flex-1">
                        <h4 className="font-semibold mb-1">{alert.title}</h4>
                        <p className="text-sm">{alert.message}</p>
                      </div>
                    </div>
                    {/* Voice button for each alert */}
                    <button
                      onClick={() => speakText(`${alert.title}: ${alert.message}`)}
                      className="mt-2 text-blue-600 hover:text-blue-800 text-sm flex items-center space-x-1"
                      disabled={isListening}
                    >
                      <span>ЁЯФК</span>
                      <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'рж╢рзБржирзБржи'}</span>
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mt-8">
          <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              ЁЯЪА ржжрзНрж░рзБржд ржХрж╛ржЬ
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <button className="p-4 bg-farming-green text-white rounded-lg hover:bg-farming-dark-green transition-colors">
                <div className="text-2xl mb-2">ЁЯМ╛</div>
                <p className="font-medium">ржирждрзБржи ржлрж╕рж▓ ржпрзЛржЧ ржХрж░рзБржи</p>
              </button>
              <button className="p-4 bg-weather-blue text-white rounded-lg hover:bg-blue-600 transition-colors">
                <div className="text-2xl mb-2">ЁЯУК</div>
                <p className="font-medium">рж░рж┐ржкрзЛрж░рзНржЯ ржжрзЗржЦрзБржи</p>
              </button>
              <button className="p-4 bg-soil-brown text-white rounded-lg hover:bg-yellow-600 transition-colors">
                <div className="text-2xl mb-2">ЁЯМ▒</div>
                <p className="font-medium">ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛</p>
              </button>
              <button className="p-4 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                <div className="text-2xl mb-2">ЁЯУЮ</div>
                <p className="font-medium">рж╕рж╛рж╣рж╛ржпрзНржп ржЪрж╛ржЗ</p>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Dashboard
