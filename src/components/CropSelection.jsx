import React, { useState } from 'react'
import Navigation from './Navigation'

const CropSelection = () => {
  const [selectedCrop, setSelectedCrop] = useState(null)
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [isListening, setIsListening] = useState(false)

  // Placeholder data for crops
  const crops = [
    {
      id: 'rice',
      name: 'ржзрж╛ржи',
      icon: 'ЁЯМ╛',
      description: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржкрзНрж░ржзрж╛ржи ржЦрж╛ржжрзНржпрж╢рж╕рзНржп',
      sowingTime: 'ржЬрзНржпрзИрж╖рзНржа-ржЖрж╖рж╛ржврж╝ (ржЬрзБржи-ржЬрзБрж▓рж╛ржЗ)',
      harvestingTime: 'ржЕржЧрзНрж░рж╣рж╛ржпрж╝ржг-ржкрзМрж╖ (ржиржнрзЗржорзНржмрж░-ржбрж┐рж╕рзЗржорзНржмрж░)',
      tips: [
        'ржорж╛ржЯрж┐ ржнрж╛рж▓ржнрж╛ржмрзЗ ржЪрж╛рж╖ ржХрж░рзЗ ржирж┐ржи',
        'ржмрзАржЬ рзирзк ржШржгрзНржЯрж╛ ржкрж╛ржирж┐рждрзЗ ржнрж┐ржЬрж┐ржпрж╝рзЗ рж░рж╛ржЦрзБржи',
        'рж╕рж╛рж░рж┐ ржерзЗржХрзЗ рж╕рж╛рж░рж┐рж░ ржжрзВрж░рждрзНржм рзирзж-рзирзл рж╕рзЗржорж┐ рж░рж╛ржЦрзБржи',
        'ржирж┐ржпрж╝ржорж┐ржд рж╕рзЗржЪ ржжрж┐ржи',
      ],
      weather: 'ржЙрж╖рзНржг ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЙржкржпрзБржХрзНржд',
      soil: 'ржжрзЛржЖржБрж╢ ржорж╛ржЯрж┐ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж▓',
    },
    {
      id: 'wheat',
      name: 'ржЧржо',
      icon: 'ЁЯМ┐',
      description: 'рж╢рзАрждржХрж╛рж▓рзАржи ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж╢рж╕рзНржп',
      sowingTime: 'ржХрж╛рж░рзНрждрж┐ржХ-ржЕржЧрзНрж░рж╣рж╛ржпрж╝ржг (ржЕржХрзНржЯрзЛржмрж░-ржиржнрзЗржорзНржмрж░)',
      harvestingTime: 'ржлрж╛рж▓рзНржЧрзБржи-ржЪрзИрждрзНрж░ (ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐-ржорж╛рж░рзНржЪ)',
      tips: [
        'рж╢рзАрждржХрж╛рж▓рзЗ рж░рзЛржкржг ржХрж░рзБржи',
        'ржорж╛ржЯрж┐ рж╢рзБржХржирзЛ рж░рж╛ржЦрзБржи',
        'ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи рж╕рж╛рж░ ржмрзЗрж╢рж┐ ржжрж┐ржи',
        'ржЬрж▓рж╛ржмржжрзНржзрждрж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи',
      ],
      weather: 'рж╢рзАрждржХрж╛рж▓рзАржи рж╢рзБрж╖рзНржХ ржЖржмрж╣рж╛ржУржпрж╝рж╛',
      soil: 'ржжрзЛржЖржБрж╢ ржерзЗржХрзЗ ржнрж╛рж░рзА ржорж╛ржЯрж┐',
    },
    {
      id: 'corn',
      name: 'ржнрзБржЯрзНржЯрж╛',
      icon: 'ЁЯМ╜',
      description: 'ржЙржЪрзНржЪ ржкрзБрж╖рзНржЯрж┐ржорж╛ржи рж╕ржорзНржкржирзНржи рж╢рж╕рзНржп',
      sowingTime: 'ржлрж╛рж▓рзНржЧрзБржи-ржЪрзИрждрзНрж░ (ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐-ржорж╛рж░рзНржЪ)',
      harvestingTime: 'ржЖрж╖рж╛ржврж╝-рж╢рзНрж░рж╛ржмржг (ржЬрзБрж▓рж╛ржЗ-ржЖржЧрж╕рзНржЯ)',
      tips: [
        'ржЧрж░ржоржХрж╛рж▓рзЗ рж░рзЛржкржг ржХрж░рзБржи',
        'ржорж╛ржЯрж┐ ржЧржнрзАрж░ржнрж╛ржмрзЗ ржЪрж╛рж╖ ржХрж░рзБржи',
        'рж╕рж╛рж░рж┐ ржерзЗржХрзЗ рж╕рж╛рж░рж┐рж░ ржжрзВрж░рждрзНржм рзмрзж-рзнрзл рж╕рзЗржорж┐',
        'ржирж┐ржпрж╝ржорж┐ржд ржЖржЧрж╛ржЫрж╛ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи',
      ],
      weather: 'ржЙрж╖рзНржг ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛',
      soil: 'ржжрзЛржЖржБрж╢ ржорж╛ржЯрж┐ ржЙржкржпрзБржХрзНржд',
    },
    {
      id: 'vegetables',
      name: 'рж╕ржмржЬрж┐',
      icon: 'ЁЯеж',
      description: 'ржирж╛ржирж╛ ржзрж░ржирзЗрж░ рж╕ржмржЬрж┐ ржЪрж╛рж╖',
      sowingTime: 'рж╕рж╛рж░рж╛ ржмржЫрж░ (ржорзМрж╕рзБржо ржЕржирзБржпрж╛ржпрж╝рзА)',
      harvestingTime: 'рж░рзЛржкржгрзЗрж░ рзкрзл-рзпрзж ржжрж┐ржи ржкрж░',
      tips: [
        'ржорзМрж╕рзБржо ржЕржирзБржпрж╛ржпрж╝рзА рж╕ржмржЬрж┐ ржмрзЗржЫрзЗ ржирж┐ржи',
        'ржорж╛ржЯрж┐ ржнрж╛рж▓ржнрж╛ржмрзЗ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рзБржи',
        'ржирж┐ржпрж╝ржорж┐ржд рж╕рзЗржЪ ржУ рж╕рж╛рж░ ржжрж┐ржи',
        'ржХрзАржЯржкрждржЩрзНржЧ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржи',
      ],
      weather: 'ржорзМрж╕рзБржо ржЕржирзБржпрж╛ржпрж╝рзА ржкрж░рж┐ржмрж░рзНрждржирж╢рзАрж▓',
      soil: 'ржЬрзИржм ржкржжрж╛рж░рзНрже рж╕ржорзГржжрзНржз ржорж╛ржЯрж┐',
    },
    {
      id: 'pulses',
      name: 'ржбрж╛рж▓',
      icon: 'ЁЯлШ',
      description: 'ржкрзНрж░рзЛржЯрж┐ржирзЗрж░ ржЙрзОрж╕ ржбрж╛рж▓рж╢рж╕рзНржп',
      sowingTime: 'ржЖрж╢рзНржмрж┐ржи-ржХрж╛рж░рзНрждрж┐ржХ (рж╕рзЗржкрзНржЯрзЗржорзНржмрж░-ржЕржХрзНржЯрзЛржмрж░)',
      harvestingTime: 'ржорж╛ржШ-ржлрж╛рж▓рзНржЧрзБржи (ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐-ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐)',
      tips: [
        'рж╢рзАрждржХрж╛рж▓рзЗ рж░рзЛржкржг ржХрж░рзБржи',
        'ржорж╛ржЯрж┐ рж╢рзБржХржирзЛ рж░рж╛ржЦрзБржи',
        'рж░рж╛ржЗржЬрзЛржмрж┐ржпрж╝рж╛ржо рж╕рж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
        'ржЬрж▓рж╛ржмржжрзНржзрждрж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи',
      ],
      weather: 'рж╢рзАрждржХрж╛рж▓рзАржи рж╢рзБрж╖рзНржХ ржЖржмрж╣рж╛ржУржпрж╝рж╛',
      soil: 'ржжрзЛржЖржБрж╢ ржерзЗржХрзЗ ржнрж╛рж░рзА ржорж╛ржЯрж┐',
    },
    {
      id: 'oilseeds',
      name: 'рждрзЗрж▓ржмрзАржЬ',
      icon: 'ЁЯМ╗',
      description: 'рждрзЗрж▓ ржЙрзОржкрж╛ржжржиржХрж╛рж░рзА ржлрж╕рж▓',
      sowingTime: 'ржХрж╛рж░рзНрждрж┐ржХ-ржЕржЧрзНрж░рж╣рж╛ржпрж╝ржг (ржЕржХрзНржЯрзЛржмрж░-ржиржнрзЗржорзНржмрж░)',
      harvestingTime: 'ржлрж╛рж▓рзНржЧрзБржи-ржЪрзИрждрзНрж░ (ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐-ржорж╛рж░рзНржЪ)',
      tips: [
        'рж╢рзАрждржХрж╛рж▓рзЗ рж░рзЛржкржг ржХрж░рзБржи',
        'ржорж╛ржЯрж┐ ржнрж╛рж▓ржнрж╛ржмрзЗ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рзБржи',
        'рж╕рж╛рж░рж┐ ржерзЗржХрзЗ рж╕рж╛рж░рж┐рж░ ржжрзВрж░рждрзНржм рзйрзж-рзкрзл рж╕рзЗржорж┐',
        'ржирж┐ржпрж╝ржорж┐ржд ржЖржЧрж╛ржЫрж╛ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи',
      ],
      weather: 'рж╢рзАрждржХрж╛рж▓рзАржи рж╢рзБрж╖рзНржХ ржЖржмрж╣рж╛ржУржпрж╝рж╛',
      soil: 'ржжрзЛржЖржБрж╢ ржорж╛ржЯрж┐ ржЙржкржпрзБржХрзНржд',
    },
  ]

  // Voice assistance function
  const speakText = (text) => {
    if ('speechSynthesis' in window) {
      setIsListening(true)
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = 'bn-IN'
      utterance.onend = () => setIsListening(false)
      speechSynthesis.speak(utterance)
    } else {
      alert('ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржнржпрж╝рзЗрж╕ рж╕рж╛ржкрзЛрж░рзНржЯ ржирзЗржЗ')
    }
  }

  // Toggle dark mode
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
    document.documentElement.classList.toggle('dark')
  }

  return (
    <div className={`min-h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-50'}`}>
      <Navigation />
      
      {/* Dark Mode Toggle */}
      <div className="fixed top-20 left-4 z-50">
        <button
          onClick={toggleDarkMode}
          className={`p-3 rounded-full shadow-lg ${
            isDarkMode ? 'bg-yellow-500 text-gray-900' : 'bg-gray-800 text-white'
          }`}
          title={isDarkMode ? 'ржЖрж▓рзЛ ржорзЛржб' : 'ржЕржирзНржзржХрж╛рж░ ржорзЛржб'}
        >
          {isDarkMode ? 'тШАя╕П' : 'ЁЯМЩ'}
        </button>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            ЁЯМ╛ ржлрж╕рж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
          </h1>
          <p className="text-gray-600">
            ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржорж╛ржЯрж┐рж░ ржзрж░ржи ржЕржирзБржпрж╛ржпрж╝рзА ржЙржкржпрзБржХрзНржд ржлрж╕рж▓ ржмрзЗржЫрзЗ ржирж┐ржи
          </p>
          
          {/* Voice button for header */}
          <button
            onClick={() => speakText('ржлрж╕рж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржорж╛ржЯрж┐рж░ ржзрж░ржи ржЕржирзБржпрж╛ржпрж╝рзА ржЙржкржпрзБржХрзНржд ржлрж╕рж▓ ржмрзЗржЫрзЗ ржирж┐ржи')}
            className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
            disabled={isListening}
          >
            <span>ЁЯФК</span>
            <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'рж╢рж┐рж░рзЛржирж╛ржо рж╢рзБржирзБржи'}</span>
          </button>
        </div>

        {/* Crop Grid */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
          {crops.map((crop) => (
            <button
              key={crop.id}
              onClick={() => setSelectedCrop(crop)}
              className={`p-4 rounded-xl border-2 transition-all duration-200 hover:scale-105 ${
                selectedCrop?.id === crop.id
                  ? 'border-farming-green bg-green-50 shadow-lg'
                  : 'border-gray-200 bg-white hover:border-farming-green hover:bg-green-50'
              }`}
            >
              <div className="text-4xl mb-2">{crop.icon}</div>
              <p className="font-semibold text-gray-800 text-sm">{crop.name}</p>
            </button>
          ))}
        </div>

        {/* Selected Crop Details */}
        {selectedCrop && (
          <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
            <div className="flex items-center space-x-4 mb-6">
              <span className="text-5xl">{selectedCrop.icon}</span>
              <div>
                <h2 className="text-2xl font-bold text-gray-800">{selectedCrop.name}</h2>
                <p className="text-gray-600">{selectedCrop.description}</p>
              </div>
              
              {/* Voice button for crop description */}
              <button
                onClick={() => speakText(`${selectedCrop.name}: ${selectedCrop.description}`)}
                className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                disabled={isListening}
              >
                <span>ЁЯФК</span>
                <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'рж╢рзБржирзБржи'}</span>
              </button>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {/* Left Column - Basic Info */}
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
                  <h3 className="font-semibold text-blue-800 mb-2">ЁЯМ▒ рж░рзЛржкржгрзЗрж░ рж╕ржоржпрж╝</h3>
                  <p className="text-blue-700">{selectedCrop.sowingTime}</p>
                </div>

                <div className="bg-green-50 p-4 rounded-lg border-l-4 border-green-400">
                  <h3 className="font-semibold text-green-800 mb-2">ЁЯМ╛ рж╕ржВржЧрзНрж░рж╣рзЗрж░ рж╕ржоржпрж╝</h3>
                  <p className="text-green-700">{selectedCrop.harvestingTime}</p>
                </div>

                <div className="bg-yellow-50 p-4 rounded-lg border-l-4 border-yellow-400">
                  <h3 className="font-semibold text-yellow-800 mb-2">ЁЯМбя╕П ржЖржмрж╣рж╛ржУржпрж╝рж╛</h3>
                  <p className="text-yellow-700">{selectedCrop.weather}</p>
                </div>

                <div className="bg-brown-50 p-4 rounded-lg border-l-4 border-soil-brown">
                  <h3 className="font-semibold text-brown-800 mb-2">ЁЯМ▒ ржорж╛ржЯрж┐</h3>
                  <p className="text-brown-700">{selectedCrop.soil}</p>
                </div>
              </div>

              {/* Right Column - Tips */}
              <div>
                <h3 className="font-semibold text-gray-800 mb-4 text-lg">
                  ЁЯТб ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржЯрж┐ржкрж╕
                </h3>
                <div className="space-y-3">
                  {selectedCrop.tips.map((tip, index) => (
                    <div key={index} className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                      <span className="text-farming-green text-lg">тЬУ</span>
                      <p className="text-gray-700">{tip}</p>
                    </div>
                  ))}
                </div>
                
                {/* Voice button for tips */}
                <button
                  onClick={() => speakText(`${selectedCrop.name} ржЪрж╛рж╖рзЗрж░ ржЯрж┐ржкрж╕: ${selectedCrop.tips.join('. ')}`)}
                  className="mt-4 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2"
                  disabled={isListening}
                >
                  <span>ЁЯФК</span>
                  <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'ржЯрж┐ржкрж╕ рж╢рзБржирзБржи'}</span>
                </button>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="mt-6 flex flex-col sm:flex-row gap-4">
              <button className="btn-primary">
                ЁЯУЕ ржХрзНржпрж╛рж▓рзЗржирзНржбрж╛рж░рзЗ ржпрзЛржЧ ржХрж░рзБржи
              </button>
              <button className="btn-secondary">
                ЁЯУЪ ржЖрж░ржУ ржЬрж╛ржирзБржи
              </button>
              <button className="bg-soil-brown hover:bg-yellow-600 text-white font-semibold py-3 px-6 rounded-lg text-lg transition-colors duration-200 shadow-lg hover:shadow-xl">
                ЁЯМ▒ рж░рзЛржкржг рж╢рзБрж░рзБ ржХрж░рзБржи
              </button>
            </div>
          </div>
        )}

        {/* Seasonal Recommendations */}
        <div className="mt-8">
          <div className={`card ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              ЁЯМдя╕П ржПржЗ ржорзМрж╕рзБржорзЗ ржЙржкржпрзБржХрзНржд ржлрж╕рж▓
            </h2>
            <div className="grid md:grid-cols-3 gap-4">
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-3xl mb-2">ЁЯМ╛</div>
                <h3 className="font-semibold text-gray-800">ржзрж╛ржи</h3>
                <p className="text-sm text-gray-600">ржЬрзНржпрзИрж╖рзНржа-ржЖрж╖рж╛ржврж╝ ржорж╛рж╕рзЗ рж░рзЛржкржг</p>
              </div>
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-3xl mb-2">ЁЯеж</div>
                <h3 className="font-semibold text-gray-800">ржЧрзНрж░рзАрж╖рзНржоржХрж╛рж▓рзАржи рж╕ржмржЬрж┐</h3>
                <p className="text-sm text-gray-600">ржЪрж╛рж▓ржХрзБржоржбрж╝рж╛, ржХрж░рж▓рж╛, ржврзЗржБржбрж╝рж╕</p>
              </div>
              <div className="text-center p-4 bg-yellow-50 rounded-lg">
                <div className="text-3xl mb-2">ЁЯМ╜</div>
                <h3 className="font-semibold text-gray-800">ржнрзБржЯрзНржЯрж╛</h3>
                <p className="text-sm text-gray-600">ржлрж╛рж▓рзНржЧрзБржи-ржЪрзИрждрзНрж░ ржорж╛рж╕рзЗ рж░рзЛржкржг</p>
              </div>
            </div>
            
            {/* Voice button for seasonal recommendations */}
            <div className="text-center mt-4">
              <button
                onClick={() => speakText('ржПржЗ ржорзМрж╕рзБржорзЗ ржЙржкржпрзБржХрзНржд ржлрж╕рж▓: ржзрж╛ржи ржЬрзНржпрзИрж╖рзНржа-ржЖрж╖рж╛ржврж╝ ржорж╛рж╕рзЗ рж░рзЛржкржг, ржЧрзНрж░рзАрж╖рзНржоржХрж╛рж▓рзАржи рж╕ржмржЬрж┐, ржнрзБржЯрзНржЯрж╛ ржлрж╛рж▓рзНржЧрзБржи-ржЪрзИрждрзНрж░ ржорж╛рж╕рзЗ рж░рзЛржкржг')}
                className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors flex items-center space-x-2 mx-auto"
                disabled={isListening}
              >
                <span>ЁЯФК</span>
                <span>{isListening ? 'рж╢рзБржиржЫрж┐...' : 'ржорзМрж╕рзБржорж┐ ржкрж░рж╛ржорж░рзНрж╢ рж╢рзБржирзБржи'}</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default CropSelection
